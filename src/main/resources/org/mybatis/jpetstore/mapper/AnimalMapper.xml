<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2022 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.mybatis.jpetstore.mapper.AnimalMapper">

    <cache />
    <insert id="addCharacter" parameterType="hashMap">
        INSERT INTO ANIMALCHARACTER (animalId, `character`)
        VALUES (#{id},#{character})
    </insert>

    <insert id="editCharacter" parameterType="hashMap">
        INSERT INTO ANIMALCHARACTER (animalId,`character`)
        SELECT #{id},#{character} FROM dual WHERE NOT exists(
                SELECT animalId, `character`FROM ANIMALCHARACTER WHERE animalId = #{id} AND `character` = #{character}
            )
    </insert>
    <select id="getCharacterList" parameterType="int" resultType="String">
        SELECT `character`FROM ANIMALCHARACTER WHERE animalId = #{id};
    </select>
    <delete id="deleteOldCharacter" parameterType="hashMap">
        DELETE FROM ANIMALCHARACTER WHERE animalId = #{id} AND `character`=#{character}
    </delete>

    <insert id="insertAnimal" parameterType="AnimalMating">
        INSERT INTO MATINGANIMAL
            (userid, imgUrl, title, contents, categoryid, characters,sex)
        VALUES
            (#{userId}, #{imgUrl}, #{title}, #{contents}, #{categoryid} ,#{characters},#{sex})
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="plusViewCount" parameterType="AnimalMating">
        UPDATE MATINGANIMAL SET view=view+1 where id=#{id}
    </update>


    <select id="getAnimalMatingList" parameterType="hashMap" resultType="AnimalMating">


        SELECT id, userid, imgurl, title, contents, categoryid, characters,status,sex,deletestatus
        FROM MATINGANIMAL where deletestatus=0
        ORDER BY createdate desc limit #{start}, #{end}

    </select>

    <select id="getAnimalMattingDetail" resultType="AnimalMating" >
        select id,
               MATINGANIMAL.userid,
               imgurl,
               title,
               contents,
               categoryid,
               characters,
               sex,
               case
                   when YEAR(createDate) = YEAR(now()) then
                       case
                           when (TIMESTAMPDIFF(DAY, createDate, now())) > 1
                               then concat(YEAR(createDate), '년 ', MONTH(createDate), '월 ', DAY(createDate), '일 ',
                                           HOUR(createdate), '시 ', MINUTE(createdate), '분')
                           when TIMESTAMPDIFF(minute, createDate, now()) <![CDATA[<]]> 1
                               then concat(TIMESTAMPDIFF(second, createDate, now()), '초 전')
                           when TIMESTAMPDIFF(hour, createDate, now()) > 24
                               then concat(TIMESTAMPDIFF(DAY, createDate, now()), '일 전')
                           when TIMESTAMPDIFF(hour, createDate, now()) <![CDATA[<]]> 1
                               then concat(TIMESTAMPDIFF(minute, createDate, now()), '분 전')
                           when TIMESTAMPDIFF(hour, createDate, now()) <![CDATA[<]]> 24
                               then concat(TIMESTAMPDIFF(hour, createDate, now()), '시간 전')
                           end end as                                                            createDate,
               view,
               status,
               (select count(*) from BOARDLIKE where boardId = id)                               'like_count',
               (select EXISTS(select *
                              from BOARDLIKE
                              where BOARDLIKE.boardId = id and BOARDLIKE.userId = #{userId})) 'like_check'
        from MATINGANIMAL
        where id = #{id};

    </select>

    <select id="getAnimalMatingCha" parameterType="int" resultType="String">
        SELECT `character`FROM ANIMALCHARACTER WHERE animalId = #{id};
    </select>

    <update id="plusPreferView" parameterType="hashMap">
        UPDATE CHARACTERPREFER SET cnt = cnt+0.5 where userId=#{userId} and characters=#{character}
    </update>


    <!-- all List -->
    <select id="getAnimalMating" parameterType="hashMap" resultType="AnimalMating">
        select M.id, M.userid, M.imgurl, M.title, M.contents, M.categoryid, M.characters, M.status, M.sex, ANI.animal_characters
        FROM MATINGANIMAL as M
        LEFT JOIN (
            SELECT
            animalId, GROUP_CONCAT(`character`separator ', ') as animal_characters
            FROM ANIMALCHARACTER GROUP BY animalId
        ) as ANI
        ON ANI.animalId = M.id
        WHERE
        <choose>
            <when test="searchTag == 'Title'">lower(title) like #{value} AND</when>
            <when test="searchTag == 'Contents'">lower(contents) like #{value} AND</when>
            <when test="searchTag == 'UserName'">lower(userid) like #{value} AND</when>
        </choose>
        deletestatus = 0 ORDER BY createdate desc limit #{start}, #{end}
    </select>

    <select id="getAnimalMatingCount" parameterType="hashMap" resultType="Integer">
        select count(*)
        FROM MATINGANIMAL
        WHERE
        <choose>
            <when test="searchTag == 'Title'">lower(title) like #{value} AND</when>
            <when test="searchTag == 'Contents'">lower(contents) like #{value} AND</when>
            <when test="searchTag == 'UserName'">lower(userid) like #{value} AND</when>
        </choose>
         deletestatus = 0
    </select>

    <!-- recommend List -->

    <select id="getRecommendAnimalMating" parameterType="hashMap" resultType="AnimalMating">
        SELECT distinct M.id, M.userid, M.imgurl, M.title, M.contents, M.categoryid, M.characters, M.status, M.sex, ANI.animal_characters
        FROM ANIMALCHARACTER AS AC
        JOIN MATINGANIMAL M on AC.animalId = M.id
        LEFT JOIN (
        SELECT
        animalId, GROUP_CONCAT(`character`separator ', ') as animal_characters
        FROM ANIMALCHARACTER GROUP BY animalId
        ) as ANI
        ON ANI.animalId = M.id
        WHERE AC.`character` IN (
        select * from (
        select characters
        from CHARACTERPREFER
        where CHARACTERPREFER.userId=#{id} and cnt>0 order by cnt desc limit 3
        ) as XC
        )
        <choose>
            <when test="searchTag == 'Title'">AND lower(title) like #{value} </when>
            <when test="searchTag == 'Contents'">AND lower(contents) like #{value} </when>
            <when test="searchTag == 'UserName'">AND lower(userid) like #{value} </when>
        </choose>
        AND deletestatus = 0 ORDER BY createdate desc limit #{start}, #{end}
    </select>


    <!-- recommend Count List -->

    <select id="getRecommendAnimalMatingCount" parameterType="hashMap" resultType="Integer">
        SELECT count(distinct M.id)
        FROM ANIMALCHARACTER AS AC
                 JOIN MATINGANIMAL M on AC.animalId = M.id
        WHERE AC.`character` IN (
            select * from (
                              select characters
                              from CHARACTERPREFER
                              where CHARACTERPREFER.userId=#{id} and cnt>0 order by cnt desc limit 3
                          ) as XC
        )
        <choose>
            <when test="searchTag == 'Title'">AND lower(title) like #{value} </when>
            <when test="searchTag == 'Contents'">AND lower(contents) like #{value} </when>
            <when test="searchTag == 'UserName'">AND lower(userid) like #{value} </when>
        </choose>
         AND deletestatus = 0

    </select>

    <update id="editAnimal" parameterType="AnimalMating">
        UPDATE MATINGANIMAL SET
                                imgurl = #{imgUrl},
                                title = #{title},
                                contents = #{contents},
                                categoryid = #{categoryid},
                                characters = #{characters},
                                sex=#{sex}
        WHERE id = #{id}
    </update>

    <update id="updateStatus" parameterType="hashMap">
        UPDATE MATINGANIMAL SET
                                status = #{status}
        where id = #{id}
    </update>
    <select id="getStatus" parameterType="hashMap" resultType="String">
        SELECT status FROM MATINGANIMAL where id = #{id}
    </select>

    <select id="getUserIdByPostId" resultType="String">
        SELECT userid FROM MATINGANIMAL WHERE id = #{id}
    </select>



   <!-- <delete id="userAnimalDelete" parameterType="AnimalMating">
        delete from jpetstore.MATINGANIMAL where id=#{id}
    </delete> -->

    <!-- delete로 삭제하는것 대신 update로 상태 변경해줌 -->
    <update id="userAnimalDelete" parameterType="AnimalMating">
        UPDATE jpetstore.MATINGANIMAL SET deletestatus = 1 WHERE id = #{id}
    </update>


</mapper>
